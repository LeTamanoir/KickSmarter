#import "./types.jsligo" "TYPES"

namespace Kicksmarter {

  /* @entry */
  const post_project = (
    param
      : {
        cid_metadata: string,
        milestones: list<TYPES.milestone>,
        funding_due_date: timestamp
      },
    storage: TYPES.storage
  ): [list<operation>, TYPES.storage] => {
    assert_with_error(
      String.length(param.cid_metadata) > (0 as nat),
      "metadata must be non-empty"
    );
    assert_with_error(
      List.length(param.milestones) > (0 as nat),
      "milestones must be non-empty"
    );
    assert_with_error(
      param.funding_due_date > Tezos.get_now(),
      "fundingDueDate must be in the future"
    );

    let old_start_date: timestamp = Tezos.get_now();
    let old_due_date: timestamp = old_start_date + 1;
    for (const milestone of param.milestones) {
      assert_with_error(
        milestone.required_amount > (0 as tez),
        "milestone requiredAmount must be positive"
      );
      assert_with_error(
        milestone.start_date > old_start_date,
        "milestone startDate must be in the future"
      );
      assert_with_error(
        milestone.due_date > old_due_date,
        "milestone dueDate must be in the future"
      );
      old_start_date = old_due_date + 1;
      old_due_date = milestone.due_date
    };
    let milestones_map: map<nat, TYPES.milestone> = Map.empty;
    let milestone_idx = 0 as nat;
    for (const milestone of param.milestones) {
      milestones_map =
        Map.update(milestone_idx, Some(milestone), milestones_map);
      milestone_idx += (1 as nat)
    };
    const sender = Tezos.get_sender();
    const new_projet_id = storage.total_projects;
    let target_amount: tez = 0 as tez;
    for (const milestone of param.milestones) {
      target_amount += milestone.required_amount
    };
    let new_project: TYPES.project =
      {
        id: new_projet_id,
        owner: sender,
        cid_metadata: param.cid_metadata,
        milestones: milestones_map,
        votes: Map.empty,
        target_amount: target_amount,
        current_amount: 0 as tez,
        investors: Map.empty,
        funding_start_date: Tezos.get_now(),
        funding_due_date: param.funding_due_date,
        status: FUNDING()
      };
    const new_addr_to_projects =
      match(
        Big_map.find_opt(sender, storage.addr_to_projects),
        {
          Some: (projects) => list([new_projet_id, ...projects]),
          None: () => list([new_projet_id])
        }
      );
    const new_project_maker: TYPES.project_maker =
      match(
        Big_map.find_opt(sender, storage.project_makers),
        {
          Some: (maker) =>
            {
              nb_project_in_progress: maker.nb_project_in_progress + (1 as nat),
              nb_total_projects: maker.nb_total_projects + (1 as nat)
            },
          None: () =>
            { nb_project_in_progress: 0 as nat, nb_total_projects: 0 as nat }
        }
      );
    const new_storage =
      {
        ...storage,
        project_makers: Big_map.update(
          sender,
          Some(new_project_maker),
          storage.project_makers
        ),
        projects: Big_map.update(
          new_projet_id,
          Some(new_project),
          storage.projects
        ),
        addr_to_projects: Big_map.update(
          sender,
          Some(new_addr_to_projects),
          storage.addr_to_projects
        ),
        total_projects: storage.total_projects + (1 as nat)
      };
    return [list([]), new_storage]
  };


  /* @entry */
  const abort_project_funding = (param: { id: nat }, storage: TYPES.storage)
    : [list<operation>, TYPES.storage] => {
    const sender = Tezos.get_sender();
    const project =
      match(
        Big_map.find_opt(param.id, storage.projects),
        {
          Some: (project) => project,
          None: () => failwith("project not found")
        }
      );
    assert_with_error(
      project.owner == sender,
      "only project owner can abort funding"
    );
    assert_with_error(
      project.status == FUNDING(),
      "project is not in funding state"
    );
    let remaining_funds = 0 as tez;
    for (const milestone_elem of project.milestones) {
      let [_, milestone] = milestone_elem;
      remaining_funds += milestone.required_amount
    };
    let refund_operations: list<operation> = list([]);
    for (const investor of project.investors) {
      let [address, investment] = investor;
      match(
        (Tezos.get_contract_opt(address) as option<contract<unit>>),
        {
          Some: (receiver: contract<unit>) => {
            refund_operations =
              list(
                [
                  Tezos.transaction(unit, investment, receiver),
                  ...refund_operations
                ]
              )
          },
          None: () => unit
        }
      )
    };
    let new_storage =
      {
        ...storage,
        projects: Big_map.update(
          param.id,
          Some({ ...project, status: ABORTED() }),
          storage.projects
        )
      };
    return [refund_operations, new_storage]
  };


  /* @entry */
  const fund_project = (param: { id: nat }, storage: TYPES.storage)
    : [list<operation>, TYPES.storage] => {
    const amount: tez = Tezos.get_amount();
    assert_with_error(
      amount > (0 as tez),
      "sent amount must be at least 1 mutez"
    );
    const project =
      match(
        Big_map.find_opt(param.id, storage.projects),
        {
          Some: (project) => project,
          None: () => failwith("project not found")
        }
      );
    assert_with_error(project.status == FUNDING(), "Project is not in funding");
    assert_with_error(
      Tezos.get_now() < project.funding_due_date,
      "Project funding period has ended"
    );
    assert_with_error(
      project.current_amount + amount <= project.target_amount,
      "Project is already fully funded"
    );
    const sender = Tezos.get_sender();
    const new_project_investors =
      match(
        Map.find_opt(sender, project.investors),
        {
          Some: (amount) =>
            Map.update(sender, Some(amount + amount), project.investors),
          None: () => Map.update(sender, Some(amount), project.investors)
        }
      );
    const new_project =
      {
        ...project,
        current_amount: project.current_amount + amount,
        investors: new_project_investors
      };
    const new_investors =
      match(
        Big_map.find_opt(sender, storage.investors),
        {
          Some: (investor) =>
            Big_map.update(
              sender,
              Some(
                {
                  total_invested_amount: investor.total_invested_amount + amount
                }
              ),
              storage.investors
            ),
          None: () =>
            Big_map.update(
              sender,
              Some({ total_invested_amount: amount }),
              storage.investors
            )
        }
      );
    const new_storage =
      {
        ...storage,
        projects: Big_map.update(param.id, Some(new_project), storage.projects),
        investors: new_investors
      };
    return [list([]), new_storage]
  };


  /* @entry */
  const abort_project = (
    param: { id: nat, milestone_id: nat },
    storage: TYPES.storage
  ): [list<operation>, TYPES.storage] => {
    const sender = Tezos.get_sender();
    const project =
      match(
        Big_map.find_opt(param.id, storage.projects),
        {
          Some: (project) => project,
          None: () => failwith("project not found")
        }
      );
    assert_with_error(
      project.status != ABORTED(),
      "project has already been aborted"
    );
    match(
      Map.find_opt(sender, project.investors),
      { Some: (_) => unit, None: () => failwith("sender is not an investor") }
    );
    let milestone =
      match(
        Map.find_opt(param.milestone_id, project.milestones),
        {
          Some: (milestone) => milestone,
          None: () => failwith("milestone not found")
        }
      );
    let next_miletone_id = param.milestone_id + (1 as nat);
    let next_milestone =
      match(
        Map.find_opt(next_miletone_id, project.milestones),
        {
          Some: (milestone) => milestone,
          None: () => failwith("milestone not found")
        }
      );
    let now = Tezos.get_now();
    assert_with_error(
      now > milestone.due_date,
      "Milestone due date has not yet passed"
    );
    assert_with_error(
      now < next_milestone.due_date,
      "Next milestone due date has already passed"
    );
    let milestone_vote =
      match(
        Map.find_opt(param.milestone_id, project.votes),
        { Some: (vote) => vote, None: () => failwith("vote not found") }
      );
    assert_with_error(
      milestone_vote.total_weight > (milestone.required_amount / (2 as nat)),
      "Milstone abort has not been approved by the majority of investors"
    );
    let remaining_funds = 0 as tez;
    for (const milestone_elem of project.milestones) {
      let [_, milestone] = milestone_elem;
      remaining_funds += milestone.required_amount
    };
    let refund_operations: list<operation> = list([]);
    for (const investor of project.investors) {
      let [address, investment] = investor;
      let interest = (investment / project.target_amount) * remaining_funds;
      match(
        (Tezos.get_contract_opt(address) as option<contract<unit>>),
        {
          Some: (receiver: contract<unit>) => {
            refund_operations =
              list(
                [
                  Tezos.transaction(unit, interest, receiver),
                  ...refund_operations
                ]
              )
          },
          None: () => unit
        }
      )
    };
    let new_storage =
      {
        ...storage,
        projects: Big_map.update(
          param.id,
          Some({ ...project, status: ABORTED() }),
          storage.projects
        )
      };
    return [refund_operations, new_storage]
  };


  /* @entry */
  const claim_milestone = (
    param: { id: nat, milestone_id: nat },
    storage: TYPES.storage
  ): [list<operation>, TYPES.storage] => {
    const sender = Tezos.get_sender();
    const project =
      match(
        Big_map.find_opt(param.id, storage.projects),
        {
          Some: (project) => project,
          None: () => failwith("invalid project ID")
        }
      );
    assert_with_error(
      project.status == IN_PROGRESS() || project.status == FUNDING(),
      "Project is not in progress"
    );
    assert_with_error(
      project.current_amount == project.target_amount,
      "project must be fully funded to claim milestone"
    );
    assert_with_error(
      sender == project.owner,
      "only project owner can claim milestone"
    );
    const milestone =
      match(
        Map.find_opt(param.milestone_id, project.milestones),
        {
          Some: (milestone) => milestone,
          None: () => failwith("invalid milestone ID")
        }
      );
    assert_with_error(
      milestone.due_date > Tezos.get_now(),
      "milestone must have started to be claimed"
    );
    assert_with_error(
      milestone.required_amount != (0 as tez),
      "milestone already claimed"
    );
    const new_project =
      {
        ...project,
        milestones: Map.update(
          param.milestone_id,
          Some({ ...milestone, required_amount: (0 as tez) }),
          project.milestones
        ),
        status: IN_PROGRESS()
      };
    const new_storage =
      {
        ...storage,
        projects: Big_map.update(param.id, Some(new_project), storage.projects)
      };
    let receiver =
      Tezos.get_contract_with_error(sender, "Contract not found.") as
        contract<unit>;
    let send_fund_op =
      Tezos.transaction(unit, milestone.required_amount, receiver);
    return [list([send_fund_op]), new_storage]
  }


  /* @entry */
  const disapprove_milestone = (
    param: { id: nat, milestone_id: nat },
    storage: TYPES.storage
  ): [list<operation>, TYPES.storage] => {
    const project =
      match(
        Big_map.find_opt(param.id, storage.projects),
        {
          Some: (project) => project,
          None: () => failwith("project not found")
        }
      );
    assert_with_error(
      project.status == IN_PROGRESS(),
      "Project is not in progress"
    );
    let milestone =
      match(
        Map.find_opt(param.milestone_id, project.milestones),
        {
          Some: (milestone) => milestone,
          None: () => failwith("milestone not found")
        }
      );
    assert_with_error(
      milestone.due_date < Tezos.get_now(),
      "milestone must be finished to be disapproved"
    );
    const sender = Tezos.get_sender();
    const weight =
      match(
        Map.find_opt(sender, project.investors),
        {
          Some: (weight) => weight,
          None: () => failwith("sender has not voted yet")
        }
      );
    const new_storage =
      {
        ...storage,
        projects: Big_map.update(
          param.id,
          Some(
            {
              ...project,
              votes: Map.update(
                param.milestone_id,
                Some(
                  match(
                    Map.find_opt(param.milestone_id, project.votes),
                    {
                      Some: (vote) =>
                        {
                          total_weight: vote.total_weight + weight,
                          voters: Set.add(sender, vote.voters)
                        },
                      None: () =>
                        {
                          total_weight: weight,
                          voters: Set.literal(list([sender]))
                        }
                    }
                  )
                ),
                project.votes
              )
            }
          ),
          storage.projects
        )
      };
    return [list([]), new_storage]
  };


};
