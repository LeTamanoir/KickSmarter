#import "./types.jsligo" "TYPES"
namespace Kicksmarter {
  type postProjectParam = {
    metadata: string,
    milestones: list<TYPES.milestone>,
    fundingDueDate: timestamp
  };
  /* @entry */
  const postProject = (param: postProjectParam, storage: TYPES.storage)
    : [list<operation>, TYPES.storage] => {
    const sender = Tezos.get_sender();
    let targetPrice: tez = 0 as tez;
    for (const m of param.milestones) {
      targetPrice += m.requiredAmount
    };
    let new_project: TYPES.project =
      {
        id: storage.totalProjects,
        owner: sender,
        metadata: param.metadata,
        milestones: param.milestones,
        targetPrice: targetPrice,
        currentPrice: 0 as tez,
        investors: Map.empty as map<address, nat>,
        fundingStartDate: Tezos.get_now(),
        fundingDueDate: param.fundingDueDate
      };
    const newAddrToProjects =
      match(
        Big_map.find_opt(sender, storage.addrToProjects),
        {
          Some: (projects) => list([storage.totalProjects, ...projects]),
          None: () => list([storage.totalProjects])
        }
      );
    const newTotalProjects: nat = storage.totalProjects + (1 as nat);
    const newStorage =
      {
        ...storage,
        projects: list([new_project, ...storage.projects]),
        addrToProjects: Big_map.update(
          sender,
          Some(newAddrToProjects),
          storage.addrToProjects
        ),
        totalProjects: newTotalProjects
      };
    return [list([]), newStorage]
  };
  type fundProjectParam = { i: unit };
  /* @entry */
  const fundProject = (_: fundProjectParam, storage: TYPES.storage)
    : [list<operation>, TYPES.storage] => {
    const _value: tez = Tezos.get_amount();
    return [list([]), storage]
  }
};
