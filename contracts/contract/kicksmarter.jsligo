#import "./types.jsligo" "TYPES"
namespace Kicksmarter {
  type postProjectParam = {
    metadata: string,
    milestones: list<TYPES.milestone>,
    fundingDueDate: timestamp
  };
  /* @entry */
  const postProject = (param: postProjectParam, storage: TYPES.storage)
    : [list<operation>, TYPES.storage] => {
    const sender = Tezos.get_sender();
    let targetAmount: tez = 0 as tez;
    for (const m of param.milestones) {
      targetAmount += m.requiredAmount
    };
    let newProject: TYPES.project =
      {
        id: storage.totalProjects,
        owner: sender,
        metadata: param.metadata,
        milestones: param.milestones,
        targetAmount: targetAmount,
        currentAmount: 0 as tez,
        investors: Map.empty as map<address, tez>,
        fundingStartDate: Tezos.get_now(),
        fundingDueDate: param.fundingDueDate
      };
    const newAddrToProjects =
      match(
        Big_map.find_opt(sender, storage.addrToProjects),
        {
          Some: (projects) => list([storage.totalProjects, ...projects]),
          None: () => list([storage.totalProjects])
        }
      );
    const newStorage =
      {
        ...storage,
        projects: Big_map.update(
          storage.totalProjects,
          Some(newProject),
          storage.projects
        ),
        addrToProjects: Big_map.update(
          sender,
          Some(newAddrToProjects),
          storage.addrToProjects
        ),
        totalProjects: storage.totalProjects + (1 as nat)
      };
    return [list([]), newStorage]
  };
  type fundProjectParam = { id: nat };
  /* @entry */
  const fundProject = (param: fundProjectParam, storage: TYPES.storage)
    : [list<operation>, TYPES.storage] => {
    const value: tez = Tezos.get_amount();
    assert_with_error(
      value > (0 as tez),
      "You must send at least 1 mutez to fund a project."
    );
    const project =
      match(
        Big_map.find_opt(param.id, storage.projects),
        {
          Some: (project) => project,
          None: () => failwith("Project not found.")
        }
      );
    assert_with_error(
      Tezos.get_now() < project.fundingDueDate,
      "Project funding period has ended."
    );
    assert_with_error(
      project.currentAmount + value <= project.targetAmount,
      "Project is already fully funded."
    );
    const sender = Tezos.get_sender();
    const newInvestors =
      match(
        Map.find_opt(sender, project.investors),
        {
          Some: (amount) =>
            Map.update(sender, Some(amount + value), project.investors),
          None: () => Map.update(sender, Some(value), project.investors)
        }
      );
    const newProject =
      {
        ...project,
        currentAmount: project.currentAmount + value,
        investors: newInvestors
      };
    const newStorage =
      {
        ...storage,
        projects: Big_map.update(param.id, Some(newProject), storage.projects),
        investors: Big_map.update(
          sender,
          Some(
            {
              rating: 50 as nat,
              nbFakeInvestments: 0 as nat,
              nbRealInvestments: 0 as nat
            }
          ),
          storage.investors
        )
      };
    return [list([]), newStorage]
  }
};
